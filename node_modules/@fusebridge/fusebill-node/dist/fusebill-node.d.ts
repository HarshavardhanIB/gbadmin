interface AxiosTransformer {
  (data: any, headers?: any): any;
}

interface AxiosAdapter {
  (config: AxiosRequestConfig): AxiosPromise<any>;
}

interface AxiosBasicCredentials {
  username: string;
  password: string;
}

interface AxiosProxyConfig {
  host: string;
  port: number;
  auth?: {
    username: string;
    password:string;
  };
  protocol?: string;
}

type Method =
  | 'get' | 'GET'
  | 'delete' | 'DELETE'
  | 'head' | 'HEAD'
  | 'options' | 'OPTIONS'
  | 'post' | 'POST'
  | 'put' | 'PUT'
  | 'patch' | 'PATCH'
  | 'purge' | 'PURGE'
  | 'link' | 'LINK'
  | 'unlink' | 'UNLINK'

type ResponseType =
  | 'arraybuffer'
  | 'blob'
  | 'document'
  | 'json'
  | 'text'
  | 'stream'

interface AxiosRequestConfig {
  url?: string;
  method?: Method;
  baseURL?: string;
  transformRequest?: AxiosTransformer | AxiosTransformer[];
  transformResponse?: AxiosTransformer | AxiosTransformer[];
  headers?: any;
  params?: any;
  paramsSerializer?: (params: any) => string;
  data?: any;
  timeout?: number;
  timeoutErrorMessage?: string;
  withCredentials?: boolean;
  adapter?: AxiosAdapter;
  auth?: AxiosBasicCredentials;
  responseType?: ResponseType;
  xsrfCookieName?: string;
  xsrfHeaderName?: string;
  onUploadProgress?: (progressEvent: any) => void;
  onDownloadProgress?: (progressEvent: any) => void;
  maxContentLength?: number;
  validateStatus?: ((status: number) => boolean) | null;
  maxBodyLength?: number;
  maxRedirects?: number;
  socketPath?: string | null;
  httpAgent?: any;
  httpsAgent?: any;
  proxy?: AxiosProxyConfig | false;
  cancelToken?: CancelToken;
  decompress?: boolean;
}

interface AxiosResponse<T = any>  {
  data: T;
  status: number;
  statusText: string;
  headers: any;
  config: AxiosRequestConfig;
  request?: any;
}

interface AxiosPromise<T = any> extends Promise<AxiosResponse<T>> {
}

interface Cancel {
  message: string;
}

interface CancelToken {
  promise: Promise<Cancel>;
  reason?: Cancel;
  throwIfRequested(): void;
}

declare class Products {
  summary(options?: {}): AxiosPromise

  list(options?: {}): AxiosPromise

  read(productId: string | number, options?: {}): AxiosPromise
}

declare class Plans {
  list(options?: {}): AxiosPromise

  read(planId: string | number, options?: {}): AxiosPromise
}

declare class PlanProducts {
  listByPlan(planId: string | number, options?: {}): AxiosPromise

  listByCatalogProduct(productId: string | number, options?: {}): AxiosPromise

  read(planProductId: string | number, options?: {}): AxiosPromise

  patch(data: object): AxiosPromise
}

declare class CustomFields {
  updateOnSubscription(data: object): AxiosPromise

  updateOnSubscriptionProduct(data: object): AxiosPromise

  updateOnPurchase(data: object): AxiosPromise
}

declare class Discounts {
  list(options?: {}): AxiosPromise

  read(discountId: string | number, options?: {}): AxiosPromise
}

declare class PlanFamilies {
  list(options?: {}): AxiosPromise

  listByPlanId(planId: string | number, options?: {}): AxiosPromise

  read(planFamilyId: string | number, options?: {}): AxiosPromise

  readBySubscriptionId(
    subscriptionId: string | number,
    options?: {}
  ): AxiosPromise
}

declare class Catalog {
  plans: Plans
  products: Products
  planProducts: PlanProducts
  customFields: CustomFields
  discounts: Discounts
  planFamilies: PlanFamilies
}

declare class Customer {
  list(options?: {}): AxiosPromise

  readOverview(customerId: string | number, options?: {}): AxiosPromise

  read(customerId: string | number, options?: {}): AxiosPromise

  create(data: object): AxiosPromise

  activate(data: object, options?: {}): AxiosPromise

  activateSubscriptionsAndPurchases(
    customerId: string | number,
    data: object,
    options?: {}
  ): AxiosPromise

  hold(customerId: string | number, options?: {}): AxiosPromise

  unHold(data: object, options?: {}): AxiosPromise

  cancel(data: object, options?: {}): AxiosPromise

  unCancel(customerId: string | number, options?: {}): AxiosPromise

  update(data: object, options?: {}): AxiosPromise

  createNote(data: object, options?: {}): AxiosPromise

  deleteNote(noteId: string | number, options?: {}): AxiosPromise
}

declare class Email {
  read(customerId: string | number, options?: {}): AxiosPromise

  update(data: object, options?: {}): AxiosPromise
}

declare class Billing {
  read(customerId: string | number, options?: {}): AxiosPromise

  update(data: object, options?: {}): AxiosPromise
}

declare class Address {
  read(customerId: string | number, options?: {}): AxiosPromise

  update(data: object, options?: {}): AxiosPromise
}

declare class ShippingBillingAddress {
  read(addressId: string | number, options?: {}): AxiosPromise

  create(data: object, options?: {}): AxiosPromise

  update(data: object, options?: {}): AxiosPromise

  readCountries(options?: {}): AxiosPromise
}

declare class Customers {
  customer: Customer
  email: Email
  billing: Billing
  address: Address
  shippingBillingAddress: ShippingBillingAddress
}

declare class Subscription {
  list(options?: {}): AxiosPromise

  listSummary(options?: {}): AxiosPromise

  listByCustomer(customerId: string | number, options?: {}): AxiosPromise

  read(subscriptionId: string | number, options?: {}): AxiosPromise

  create(data: object, options?: {}): AxiosPromise

  update(data: object, options?: {}): AxiosPromise

  activate(subscriptionId: string | number, options?: {}): AxiosPromise

  activateMultiple(data: object, options?: {}): AxiosPromise

  provision(subscriptionId: string | number, options?: {}): AxiosPromise

  cancel(data: object, options?: {}): AxiosPromise

  delete(subscriptionId: string | number, options?: {}): AxiosPromise

  countByStatus(
    customerId: string | number,
    status:
      | 'Active'
      | 'Draft'
      | 'Cancelled'
      | 'Provisioning'
      | 'Expired'
      | 'Suspended'
      | 'Migrated'
      | 'StandingOrder'
  )
}

declare class Products$1 {
  read(subscriptionId: string | number, options?: {}): AxiosPromise

  update(data: object, options?: {}): AxiosPromise

  updateQuantity(data: object, options?: {}): AxiosPromise
}

declare class ProductPrice {
  create(data: object, options?: {}): AxiosPromise

  update(data: object, options?: {}): AxiosPromise

  delete(subscriptionProductId: string | number, options?: {}): AxiosPromise
}

declare class BillingPeriodDefinitions {
  listByCustomer(customerId: string | number, options?: {}): AxiosPromise

  readBySubscriptionId(
    subscriptionId: string | number,
    options?: {}
  ): AxiosPromise

  read(billingPeriodDefinitionId: string | number, options?: {}): AxiosPromise

  create(data: object, options?: {}): AxiosPromise

  preview(data: object, options?: {}): AxiosPromise

  update(data: object, options?: {}): AxiosPromise

  delete(billingPeriodDefinitionId: string | number, options?: {}): AxiosPromise
}

declare class Coupons {
  list(options?: {}): AxiosPromise

  read(couponId: string | number, options?: {}): AxiosPromise

  validate(data: object, options?: {}): AxiosPromise

  apply(data: object, options?: {}): AxiosPromise

  delete(
    subscriptionId: string | number,
    couponCode: string | number,
    deleteAllDiscounts: string | number,
    options?: {}
  ): AxiosPromise
}

declare class Migrations {
  read(subscriptionId: string | number, options?: {}): AxiosPromise

  create(
    subscriptionId: string | number,
    data: object,
    options?: {}
  ): AxiosPromise

  delete(subscriptionId: string | number, options?: {}): AxiosPromise
}

declare class Subscriptions {
  subscription: Subscription
  products: Products$1
  productPrice: ProductPrice
  billingPeriodDefinitions: BillingPeriodDefinitions
  coupons: Coupons
  migrations: Migrations
}

declare class Purchase {
  listByProduct(productId: string | number, options?: {}): AxiosPromise

  listByCustomer(customerId: string | number, options?: {}): AxiosPromise

  read(purchaseId: string | number, options?: {}): AxiosPromise

  createBulk(data: object, options?: {}): AxiosPromise

  create(data: object, options?: {}): AxiosPromise

  finalize(data: object, options?: {}): AxiosPromise

  split(data: object, options?: {}): AxiosPromise

  update(data: object, options?: {}): AxiosPromise

  applyCoupon(data: object, options?: {}): AxiosPromise

  deleteCoupon(
    purchaseId: string | number,
    couponCode: string | number,
    deleteAllDiscounts: string | number,
    options?: {}
  ): AxiosPromise

  cancel(data: object, options?: {}): AxiosPromise

  deleteDraft(purchaseId: string | number, options?: {}): AxiosPromise
}

declare class Discount {
  read(purchaseDiscountId: string | number, options?: {}): AxiosPromise

  create(data: object, options?: {}): AxiosPromise

  update(data: object, options?: {}): AxiosPromise

  delete(purchaseDiscountId: string | number, options?: {}): AxiosPromise
}

declare class Purchases {
  purchase: Purchase
  discount: Discount
}

declare class Payment {
  read(paymentId: string | number, options?: {}): AxiosPromise

  create(data: object, options?: {}): AxiosPromise
}

declare class Activity {
  listByCustomer(customerId: string | number, options?: {}): AxiosPromise

  list(options?: {}): AxiosPromise

  listChildActivityByCustomer(
    customerId: string | number,
    options?: {}
  ): AxiosPromise

  read(paymentActivityId: string | number, options?: {}): AxiosPromise

  autoResolve(data: object, options?: {}): AxiosPromise

  manualResolve(data: object, options?: {}): AxiosPromise
}

declare class Refund {
  read(transactionId: string | number, options?: {}): AxiosPromise

  create(data: object, options?: {}): AxiosPromise
}

declare class Ach {
  listByCustomer(customerId: string | number, options?: {}): AxiosPromise

  read(paymentMethodId: string | number, options?: {}): AxiosPromise

  create(data: object, options?: {}): AxiosPromise

  update(data: object, options?: {}): AxiosPromise

  delete(paymentMethodId: string | number, options?: {}): AxiosPromise
}

declare class CreditCard {
  listByCustomer(customerId: string | number, options?: {}): AxiosPromise

  read(paymentMethodId: string | number, options?: {}): AxiosPromise

  create(data: object, options?: {}): AxiosPromise

  update(data: object, options?: {}): AxiosPromise

  delete(paymentMethodId: string | number, options?: {}): AxiosPromise
}

declare class Method$1 {
  ach: Ach
  creditCard: CreditCard

  listByCustomer(customerId: string | number, options?: {}): AxiosPromise

  setCustomerDefault(
    paymentMethodId: string | number,
    customerId: string | number,
    options?: {}
  ): AxiosPromise
}

declare class Transaction {
  listByCustomer(customerId: string | number, options?: {}): AxiosPromise

  list(options?: {}): AxiosPromise
}

declare class Credit {
  read(transactionId: string | number, options?: {}): AxiosPromise

  create(data: object, options?: {}): AxiosPromise
}

declare class Debit {
  read(transactionId: string | number, options?: {}): AxiosPromise

  create(data: object, options?: {}): AxiosPromise
}

declare class Stripe {
  achTokenImport(data: object, options?: {}): AxiosPromise

  creditCardTokenImport(data: object, options?: {}): AxiosPromise

  connectAchTokenImport(data: object, options?: {}): AxiosPromise

  connectCreditCardTokenImport(data: object, options?: {}): AxiosPromise
}

declare class Paypal {
  create(data: object, options?: {}): AxiosPromise

  delete(paymentMethodId: string | number, options?: {}): AxiosPromise
}

declare class Braintree {
  cardTokenImport(data: object, options?: {}): AxiosPromise
}

declare class Payments {
  payment: Payment
  activity: Activity
  refund: Refund
  method: Method$1
  transaction: Transaction
  credit: Credit
  debit: Debit
  stripe: Stripe
  paypal: Paypal
  braintree: Braintree
}

declare class Invoice {
  list(options?: {}): AxiosPromise

  listSummary(options?: {}): AxiosPromise

  listByCustomer(
    customerId: string | number,
    showZeroDollarCharges?: boolean,
    options?: {}
  ): AxiosPromise

  read(
    invoiceId: string | number,
    showTrackedItems?: boolean,
    groupCharges?: boolean,
    options?: {}
  ): AxiosPromise

  readAsHtml(
    invoiceId: string | number,
    showTrackedItems?: boolean,
    options?: {}
  ): AxiosPromise

  readAsPdf(
    invoiceId: string | number,
    showTrackedItems?: boolean,
    options?: {}
  ): AxiosPromise

  listCreditAllocations(invoiceId: string | number, options?: {}): AxiosPromise

  listPaymentAllocations(invoiceId: string | number, options?: {}): AxiosPromise

  writeOff(data: object, options?: {}): AxiosPromise
}

declare class Invoices {
  invoice: Invoice
}

// Project: https://github.com/claygorman/fusebill-node-sdk


interface BaseOptions {
  baseUrl?: string
}

interface BottleneckOptions {
  maxConcurrent?: number | null
  minTime?: number
  highWater?: number | null
  reservoir?: number | null
  reservoirRefreshInterval?: number | null
  reservoirRefreshAmount?: number | null
  reservoirIncreaseInterval?: number | null
  reservoirIncreaseAmount?: number | null
  reservoirIncreaseMaximum?: number | null
  [key: string]: any
}

interface LimiterOptions {
  limiter?: BottleneckOptions
}

interface ApiOptions extends BaseOptions, LimiterOptions {
  apiKey: string
}

declare class Client {
  constructor(options?: ApiOptions)
  apiRequest(options: {
    method?: string
    url?: string
    data?: any
    qs?: any
  }): AxiosPromise
  setAuth(options: { apiKey?: string })
  catalog: Catalog
  customers: Customers
  subscriptions: Subscriptions
  purchases: Purchases
  payments: Payments
  invoices: Invoices
}

export { ApiOptions, BottleneckOptions, Client, LimiterOptions };
