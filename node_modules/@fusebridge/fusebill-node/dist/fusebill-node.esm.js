import axios from 'axios';
import axiosRetry from 'axios-retry';
import _ from 'lodash';
import Bottleneck from 'bottleneck';
import { EventEmitter } from 'events';

class Plans {
  constructor(client) {
    this.client = client;
  }

  list(options) {
    return this.client.apiRequest({
      method: 'GET',
      url: '/Plans',
      qs: options
    });
  }

  read(planId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/Plans/${planId}`,
      qs: options
    });
  }

}

class Products {
  constructor(client) {
    this.client = client;
  }

  summary(options) {
    return this.client.apiRequest({
      method: 'GET',
      url: '/ProductSummary',
      qs: options
    });
  }

  list(options) {
    return this.client.apiRequest({
      method: 'GET',
      url: '/Products',
      qs: options
    });
  }

  read(productId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/Products/${productId}`,
      qs: options
    });
  }

}

class PlanProducts {
  constructor(client) {
    this.client = client;
  }

  listByPlan(planId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/plans/${planId}/planProducts`,
      qs: options
    });
  }

  listByCatalogProduct(productId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/products/${productId}/planProducts`,
      qs: options
    });
  }

  read(planProductId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/PlanProducts/${planProductId}`,
      qs: options
    });
  }

  patch(data) {
    return this.client.apiRequest({
      method: 'PATCH',
      url: `/planProducts`,
      data
    });
  }

}

class CustomFields {
  constructor(client) {
    this.client = client;
  }

  updateOnSubscription(data) {
    return this.client.apiRequest({
      method: 'PUT',
      url: 'SubscriptionCustomFields',
      data
    });
  }

  updateOnSubscriptionProduct(data) {
    return this.client.apiRequest({
      method: 'PUT',
      url: 'SubscriptionProductCustomFields',
      data
    });
  }

  updateOnPurchase(data) {
    return this.client.apiRequest({
      method: 'PUT',
      url: 'SubscriptionProductCustomFields',
      data
    });
  }

}

class Discounts {
  constructor(client) {
    this.client = client;
  }

  list(options) {
    return this.client.apiRequest({
      method: 'GET',
      url: 'Discounts',
      qs: options
    });
  }

  read(discountId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/Discounts/${discountId}`,
      qs: options
    });
  }

}

class PlanFamilies {
  constructor(client) {
    this.client = client;
  }

  list(options) {
    return this.client.apiRequest({
      method: 'GET',
      url: 'PlanFamilies',
      qs: options
    });
  }

  listByPlanId(planId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/PlanFamilies/ByPlan/${planId}`,
      qs: options
    });
  }

  read(planFamilyId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/PlanFamilies/${planFamilyId}`,
      qs: options
    });
  }

  readBySubscriptionId(subscriptionId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/planFamilies/bySubscription/${subscriptionId}`,
      qs: options
    });
  }

}

class Catalog {
  constructor(client) {
    this.plans = new Plans(client);
    this.products = new Products(client);
    this.planProducts = new PlanProducts(client);
    this.customFields = new CustomFields(client);
    this.discounts = new Discounts(client);
    this.planFamilies = new PlanFamilies(client);
  }

}

class Customer {
  constructor(client) {
    this.client = client;
  }

  list(options) {
    return this.client.apiRequest({
      method: 'GET',
      url: '/customers',
      qs: options
    });
  }

  readOverview(customerId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/customers/${customerId}/overview`,
      qs: options
    });
  }

  read(customerId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/customers/${customerId}`,
      qs: options
    });
  }

  create(data) {
    return this.client.apiRequest({
      method: 'POST',
      url: '/customers',
      data
    });
  }

  activate(data, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: '/customeractivation',
      data,
      qs: options
    });
  }

  activateSubscriptionsAndPurchases(customerId, data, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: `/customers/purchase/${customerId}`,
      data,
      qs: options
    });
  }

  hold(customerId, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: `/customerhold/${customerId}`,
      qs: options
    });
  }

  unHold(data, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: '/customers/unhold',
      data,
      qs: options
    });
  }

  cancel(data, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: '/customercancellation',
      data,
      qs: options
    });
  }

  unCancel(customerId, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: `/customers/uncancel/${customerId}`,
      qs: options
    });
  }

  update(data, options) {
    return this.client.apiRequest({
      method: 'PUT',
      url: '/customers',
      data,
      qs: options
    });
  }

  createNote(data, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: '/customernotes',
      data,
      qs: options
    });
  }

  deleteNote(noteId, options) {
    return this.client.apiRequest({
      method: 'DELETE',
      url: `/customerNotes/${noteId}`,
      data,
      qs: options
    });
  }

}

class Email {
  constructor(client) {
    this.client = client;
  }

  read(customerId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/customers/${customerId}/CustomerEmailPreferences`,
      qs: options
    });
  }

  update(data, options) {
    return this.client.apiRequest({
      method: 'PUT',
      url: '/CustomerEmailPreferences',
      data,
      qs: options
    });
  }

}

class Billing {
  constructor(client) {
    this.client = client;
  }

  read(customerId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/customerbillingsetting/${customerId}`,
      qs: options
    });
  }

  update(data, options) {
    return this.client.apiRequest({
      method: 'PUT',
      url: '/customerbillingsetting',
      data,
      qs: options
    });
  }

}

class Address {
  constructor(client) {
    this.client = client;
  }

  read(customerId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/customerAddressPreferences/${customerId}`,
      qs: options
    });
  }

  update(data, options) {
    return this.client.apiRequest({
      method: 'PUT',
      url: '/CustomerAddressPreferences',
      data,
      qs: options
    });
  }

}

class ShippingBillingAddress {
  constructor(client) {
    this.client = client;
  }

  read(addressId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/Addresses/${addressId}`,
      qs: options
    });
  }

  create(data, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: '/Addresses',
      data,
      qs: options
    });
  }

  update(data, options) {
    return this.client.apiRequest({
      method: 'PUT',
      url: '/Addresses',
      data,
      qs: options
    });
  }

  readCountries(options) {
    return this.client.apiRequest({
      method: 'GET',
      url: '/Countries',
      qs: options
    });
  }

}

class Customers {
  constructor(client) {
    this.customer = new Customer(client);
    this.email = new Email(client);
    this.billing = new Billing(client);
    this.address = new Address(client);
    this.shippingBillingAddress = new ShippingBillingAddress(client);
  }

}

class Subscription {
  constructor(client) {
    this.client = client;
  }

  list(options) {
    return this.client.apiRequest({
      method: 'GET',
      url: '/subscriptions/getAll',
      qs: options
    });
  }

  listSummary(options) {
    return this.client.apiRequest({
      method: 'GET',
      url: '/subscriptionSummary',
      qs: options
    });
  }

  listByCustomer(customerId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/customers/${customerId}/subscriptions`,
      qs: options
    });
  }

  read(subscriptionId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/subscriptions/${subscriptionId}`,
      qs: options
    });
  }

  create(data, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: '/subscriptions',
      data,
      qs: options
    });
  }

  update(data, options) {
    return this.client.apiRequest({
      method: 'PUT',
      url: '/subscriptions',
      data,
      qs: options
    });
  }

  activate(subscriptionId, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: `/SubscriptionActivation/${subscriptionId}`,
      qs: options
    });
  }

  activateMultiple(data, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: '/SubscriptionsActivation',
      data,
      qs: options
    });
  }

  provision(subscriptionId, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: `/SubscriptionProvision/${subscriptionId}`,
      qs: options
    });
  }

  cancel(data, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: '/subscriptionCancellation',
      data,
      qs: options
    });
  }

  delete(subscriptionId, options) {
    return this.client.apiRequest({
      method: 'DELETE',
      url: `/subscriptions/Delete/${subscriptionId}`,
      qs: options
    });
  }

  countByStatus(customerId, status, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/customers/${customerId}/subscriptions/GetCountByStatus?status=${status}`,
      qs: options
    });
  }

}

class Products$1 {
  constructor(client) {
    this.client = client;
  }

  read(subscriptionProductId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/SubscriptionProducts/${subscriptionProductId}`,
      qs: options
    });
  }

  update(data, options) {
    return this.client.apiRequest({
      method: 'PUT',
      url: '/SubscriptionProducts',
      data,
      qs: options
    });
  }

  updateQuantity(data, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: '/SubscriptionProductQuantityChange',
      data,
      qs: options
    });
  }

}

class ProductPrice {
  constructor(client) {
    this.client = client;
  }

  create(data, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: '/SubscriptionProductPriceOverrides',
      data,
      qs: options
    });
  }

  update(data, options) {
    return this.client.apiRequest({
      method: 'PUT',
      url: '/SubscriptionProductPriceOverrides',
      data,
      qs: options
    });
  }

  delete(subscriptionProductId, options) {
    return this.client.apiRequest({
      method: 'DELETE',
      url: `/SubscriptionProductPriceOverrides/${subscriptionProductId}`,
      qs: options
    });
  }

}

class BillingPeriodDefinitions {
  constructor(client) {
    this.client = client;
  }

  listByCustomer(customerId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/customers/${customerId}/billingperioddefinitions`,
      qs: options
    });
  }

  readBySubscriptionId(subscriptionId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/BillingPeriodDefinitions/GetBySubscription/${subscriptionId}`,
      qs: options
    });
  }

  read(billingPeriodDefinitionId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/BillingPeriodDefinitions/${billingPeriodDefinitionId}`,
      qs: options
    });
  }

  create(data, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: '/BillingPeriodDefinitions',
      data,
      qs: options
    });
  }

  preview(data, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: '/BillingPeriodDefinitions/Preview',
      data,
      qs: options
    });
  }

  update(data, options) {
    return this.client.apiRequest({
      method: 'PUT',
      url: '/BillingPeriodDefinitions',
      data,
      qs: options
    });
  }

  delete(billingPeriodDefinitionId, options) {
    return this.client.apiRequest({
      method: 'DELETE',
      url: `/BillingPeriodDefinitions/${billingPeriodDefinitionId}`,
      qs: options
    });
  }

}

class Coupons {
  constructor(client) {
    this.client = client;
  }

  list(options) {
    return this.client.apiRequest({
      method: 'GET',
      url: '/Coupons',
      qs: options
    });
  }

  read(couponId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/Coupons/${couponId}`,
      qs: options
    });
  }

  validate(data, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: '/Coupons/Validate',
      data,
      qs: options
    });
  }

  apply(data, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: '/SubscriptionCoupons',
      data,
      qs: options
    });
  }

  delete(subscriptionId, couponCode, deleteAllDiscounts, options = {}) {
    return this.client.apiRequest({
      method: 'DELETE',
      url: '/SubscriptionCoupons',
      qs: Object.assign({}, options, {
        subscriptionId,
        couponCode,
        deleteAllDiscounts
      })
    });
  }

}

class Migrations {
  constructor(client) {
    this.client = client;
  }

  read(subscriptionId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/subscriptions/${subscriptionId}/migrate`,
      qs: options
    });
  }

  create(subscriptionId, data, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: `/subscriptions/${subscriptionId}/migrate`,
      data,
      qs: options
    });
  }

  cancel(subscriptionId, options) {
    return this.client.apiRequest({
      method: 'DELETE',
      url: `/subscriptions/${subscriptionId}/migrate`,
      qs: options
    });
  }

}

class Customers$1 {
  constructor(client) {
    this.subscription = new Subscription(client);
    this.products = new Products$1(client);
    this.productPrice = new ProductPrice(client);
    this.billingPeriodDefinitions = new BillingPeriodDefinitions(client);
    this.coupons = new Coupons(client);
    this.migrations = new Migrations(client);
  }

}

class Purchase {
  constructor(client) {
    this.client = client;
  }

  listByProduct(productId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/Purchases/GetByProductId?id=${productId}`,
      qs: options
    });
  }

  listByCustomer(customerId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/Customers/${customerId}/Purchases`,
      qs: options
    });
  }

  read(purchaseId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/Purchases/${purchaseId}`,
      qs: options
    });
  }

  createBulk(data, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: '/Purchases/BulkCreate',
      data,
      qs: options
    });
  }

  create(data, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: '/Purchases',
      data,
      qs: options
    });
  }

  finalize(data, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: '/purchases/Purchase',
      data,
      qs: options
    });
  }

  split(data, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: '/purchases/split',
      data,
      qs: options
    });
  }

  update(data, options) {
    return this.client.apiRequest({
      method: 'PUT',
      url: '/Purchases',
      data,
      qs: options
    });
  }

  applyCoupon(data, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: '/PurchaseCoupons',
      data,
      qs: options
    });
  }

  deleteCoupon(purchaseId, couponCode, deleteAllDiscounts, options) {
    return this.client.apiRequest({
      method: 'DELETE',
      url: '/PurchaseCoupons',
      qs: Object.assign({}, options, {
        purchaseId,
        couponCode,
        deleteAllDiscounts
      })
    });
  }

  cancel(data, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: '/purchases/cancel',
      data,
      qs: options
    });
  }

  deleteDraft(purchaseId, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: `/Purchases/${purchaseId}`,
      qs: options
    });
  }

}

class Discount {
  constructor(client) {
    this.client = client;
  }

  read(purchaseDiscountId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/PurchaseDiscounts/${purchaseDiscountId}`,
      qs: options
    });
  }

  create(data, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: '/purchaseDiscounts',
      data,
      qs: options
    });
  }

  update(data, options) {
    return this.client.apiRequest({
      method: 'PUT',
      url: '/purchaseDiscounts',
      data,
      qs: options
    });
  }

  delete(purchaseDiscountId, options) {
    return this.client.apiRequest({
      method: 'DELETE',
      url: `/PurchaseDiscounts/${purchaseDiscountId}`,
      qs: options
    });
  }

}

class Purchases {
  constructor(client) {
    this.purchase = new Purchase(client);
    this.discount = new Discount(client);
  }

}

class Payment {
  constructor(client) {
    this.client = client;
  }

  read(paymentId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/payments/${paymentId}`,
      qs: options
    });
  }

  create(data, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: '/payments',
      data,
      qs: options
    });
  }

}

class Activity {
  constructor(client) {
    this.client = client;
  }

  listByCustomer(customerId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/customers/${customerId}/paymentactivities`,
      qs: options
    });
  }

  list(options) {
    return this.client.apiRequest({
      method: 'GET',
      url: '/PaymentActivities/GetByAccountID',
      qs: options
    });
  }

  listChildActivityByCustomer(customerId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/customers/${customerId}/childPaymentActivities`,
      qs: options
    });
  }

  read(paymentActivityId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/PaymentActivities/${paymentActivityId}`,
      qs: options
    });
  }

  autoResolve(data, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: '/payments/AutoResolve',
      data,
      qs: options
    });
  }

  manualResolve(data, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: '/paymentActivities/Resolve',
      data,
      qs: options
    });
  }

}

class Refund {
  constructor(client) {
    this.client = client;
  }

  read(transactionId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/Refunds/${transactionId}`,
      qs: options
    });
  }

  create(data, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: '/Refunds',
      data,
      qs: options
    });
  }

}

class CreditCard {
  constructor(client) {
    this.client = client;
  }

  listByCustomer(customerId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/customers/${customerId}/paymentMethods/creditCard`,
      qs: options
    });
  }

  read(paymentMethodId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/paymentMethods/${paymentMethodId}/creditCard`,
      qs: options
    });
  }

  create(data, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: '/paymentMethods/creditCard',
      data,
      qa: options
    });
  }

  update(data, options) {
    return this.client.apiRequest({
      method: 'PUT',
      url: '/paymentMethods/creditCard',
      data,
      qa: options
    });
  }

  delete(paymentMethodId, options) {
    return this.client.apiRequest({
      method: 'DELETE',
      url: `/paymentMethods/${paymentMethodId}/creditCard`,
      qa: options
    });
  }

}

class Ach {
  constructor(client) {
    this.client = client;
  }

  listByCustomer(customerId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/customers/${customerId}/paymentMethods/achCard`,
      qs: options
    });
  }

  read(paymentMethodId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/paymentMethods/${paymentMethodId}/achCard`,
      qs: options
    });
  }

  create(data, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: '/paymentMethods/achCard',
      data,
      qa: options
    });
  }

  update(data, options) {
    return this.client.apiRequest({
      method: 'PUT',
      url: '/paymentMethods/achCard',
      data,
      qa: options
    });
  }

  delete(paymentMethodId, options) {
    return this.client.apiRequest({
      method: 'DELETE',
      url: `/paymentMethods/${paymentMethodId}/achCard`,
      qa: options
    });
  }

}

class Index {
  constructor(client) {
    this.client = client;
    this.creditCard = new CreditCard(client);
    this.ach = new Ach(client);
  }

  listByCustomer(customerId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/customers/${customerId}/paymentMethods/all`,
      qs: options
    });
  }

  setCustomerDefault(paymentMethodId, customerId, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: '/paymentMethods/makeDefault',
      qs: Object.assign({}, options, {
        id: paymentMethodId,
        customerId
      })
    });
  }

}

class Transaction {
  constructor(client) {
    this.client = client;
  }

  listByCustomer(customerId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/customers/${customerId}/customerArActivities`,
      qs: options
    });
  }

  list(options) {
    return this.client.apiRequest({
      method: 'GET',
      url: '/aractivities',
      qs: options
    });
  }

}

class Credit {
  constructor(client) {
    this.client = client;
  }

  read(transactionId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/Credits/${transactionId}`,
      qs: options
    });
  }

  create(data, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: '/Credits',
      data,
      qs: options
    });
  }

}

class Debit {
  constructor(client) {
    this.client = client;
  }

  read(transactionId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/Debits/${transactionId}`,
      qs: options
    });
  }

  create(data, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: '/Debits',
      data,
      qs: options
    });
  }

}

class Stripe {
  constructor(client) {
    this.client = client;
  }

  achTokenImport(data, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: '/achCardImport/Stripe',
      data,
      qs: options
    });
  }

  creditCardTokenImport(data, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: '/paymentMethodImport/Stripe',
      data,
      qs: options
    });
  }

  connectAchTokenImport(data, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: '/paymentMethodImport/stripeConnect',
      data,
      qs: options
    });
  }

  connectCreditCardTokenImport(data, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: '/AchCardImport/stripeConnect',
      data,
      qs: options
    });
  }

}

class Braintree {
  constructor(client) {
    this.client = client;
  }

  cardTokenImport(data, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: '/paymentMethodImport/Braintree',
      data,
      qs: options
    });
  }

}

class Payments {
  constructor(client) {
    this.payment = new Payment(client);
    this.activity = new Activity(client);
    this.refund = new Refund(client);
    this.method = new Index(client);
    this.transaction = new Transaction(client);
    this.credit = new Credit(client);
    this.debit = new Debit(client);
    this.stripe = new Stripe(client);
    this.paypal = new Payment(client);
    this.braintree = new Braintree(client);
  }

}

class Invoice {
  constructor(client) {
    this.client = client;
  }

  list(options) {
    return this.client.apiRequest({
      method: 'GET',
      url: '/Invoices',
      qs: options
    });
  }

  listSummary(options) {
    return this.client.apiRequest({
      method: 'GET',
      url: '/invoiceSummaries',
      qs: options
    });
  }

  listByCustomer(customerId, showZeroDollarCharges = false, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/Customers/${customerId}/Invoices`,
      qs: Object.assign({}, options, {
        showZeroDollarCharges
      })
    });
  }

  read(invoiceId, showTrackedItems = false, groupCharges = false, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/Invoices/${invoiceId}`,
      qs: Object.assign({}, options, {
        showTrackedItems,
        groupCharges
      })
    });
  }

  readAsHtml(invoiceId, showTrackedItems = false, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/Invoices/html/${invoiceId}`,
      qs: Object.assign({}, options, {
        showTrackedItems
      })
    });
  }

  readAsPdf(invoiceId, showTrackedItems = false, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/Invoices/pdf/${invoiceId}`,
      qs: Object.assign({}, options, {
        showTrackedItems
      })
    });
  }

  listCreditAllocations(invoiceId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/invoices/${invoiceId}/creditAllocations`,
      qs: options
    });
  }

  listPaymentAllocations(invoiceId, options) {
    return this.client.apiRequest({
      method: 'GET',
      url: `/invoices/${invoiceId}/paymentAllocations`,
      qs: options
    });
  }

  writeOff(data, options) {
    return this.client.apiRequest({
      method: 'POST',
      url: '/invoices/writeoff',
      data,
      qs: options
    });
  }

}

class Invoices {
  constructor(client) {
    this.invoice = new Invoice(client);
  }

}

const debug = require('debug')('fusebill:client'); // define how long to wait API response before throwing a timeout error


const API_TIMEOUT = 15000;
const MAX_USE_PERCENT_DEFAULT = 90;
const DEFAULT_RETRIES = 3;
axiosRetry(axios, {
  retries: DEFAULT_RETRIES
});

const getLimiter = options => new Bottleneck({
  maxConcurrent: 2,
  minTime: 1000 / 9,
  ...options.limiter
});

const setInstances = client => {
  client.catalog = new Catalog(client);
  client.customers = new Customers(client);
  client.subscriptions = new Customers$1(client);
  client.purchases = new Purchases(client);
  client.payments = new Payments(client);
  client.invoices = new Invoices(client);
};

const prepareParams = (opts, self) => {
  const params = _.cloneDeep(opts);

  params.headers = { ...params.headers
  };

  if (self.apiKey) {
    params.headers.Authorization = `Basic ${self.apiKey}`;
  }

  params.baseURL = self.baseURL;
  params.method = params.method || 'GET';
  params.qs = { ...params.qs
  };
  params.params = { ...params.qs
  }; // https://developer.fusebill.com/reference#string-filtering

  if (params.params.query) {
    const fusebillQueryFormat = Object.keys(params.params.query).filter(x => typeof params.params.query[x] !== 'undefined').map(x => `${x}:${params.params.query[x]}`).join(';') || undefined;
    delete params.params.query;
    if (fusebillQueryFormat) params.params.query = fusebillQueryFormat;
  }

  if (params.qs) delete params.qs;
  params.timeout = self.apiTimeout;
  params['axios-retry'] = {
    retries: params.retries || self.defaultRetries
  };
  if (params.retries) delete params.retries;
  return params;
};

class Client extends EventEmitter {
  constructor(options = {}) {
    super();
    this.qs = {};
    this.auth = undefined;
    this.setAuth(options);
    this.maxUsePercent = options.maxUsePercent || MAX_USE_PERCENT_DEFAULT;
    this.baseURL = options.baseURL || 'https://secure.fusebill.com/v1';
    this.apiTimeout = options.timeout || API_TIMEOUT;
    this.apiCalls = 0;
    this.defaultRetries = options.retries || DEFAULT_RETRIES;
    this.on('apiCall', params => {
      debug('apiCall', _.pick(params, ['method', 'url']));
      this.apiCalls += 1;
    });
    this.checkLimit = options.checkLimit !== undefined ? options.checkLimit : true;
    this.limiter = getLimiter(options);
    setInstances(this);
  }

  setAuth(options = {}) {
    if (options.apiKey) {
      this.apiKey = options.apiKey;
    }
  }

  apiRequest(opts) {
    const params = prepareParams(opts, this);
    return this.checkApiLimit(params).then(() => {
      this.emit('apiCall', params);
      return this.limiter.schedule(() => axios(params).then(res => {
        this.updateApiLimit(res);
        return res;
      }).then(res => res.data)); // limit the number of concurrent requests
    });
  }

  updateApiLimit(res) {
    const {
      headers
    } = res;

    if (this.usageLimit === undefined) {
      this.usageLimit = headers['x-rate-limit-limit-day'];
    }

    if (this.usageLimit !== undefined) {
      this.currentUsage = this.usageLimit - headers['x-rate-limit-remaining-day'];
    }

    return Promise.resolve();
  }

  checkApiLimit(params) {
    return new Promise((resolve, reject) => {
      // don't check the api limit for the api call
      if (this.auth) return resolve(); // don't check the api limit for the api call

      if (!this.checkLimit) return resolve(); // if maxUsePercent set to 0, do not check for the API limit (use at your own risk)

      if (this.maxUsePercent === 0) return resolve();

      if (this.currentUsage !== undefined) {
        const usagePercent = 100.0 * this.currentUsage / this.usageLimit;
        debug('usagePercent', usagePercent, 'apiCalls', this.apiCalls);

        if (usagePercent > this.maxUsePercent) {
          const err = new Error('Too close to the API limit');
          err.usageLimit = this.usageLimit;
          err.currentUsage = this.currentUsage;
          err.usagePercent = usagePercent;
          reject(err);
        }
      }

      resolve();
    });
  } // TODO: Implement this
  // getApiLimit() {
  //   this.limit = this.limit || {}
  //   const collectedAt = this.limit.collectedAt || 0
  //   const recencyMinutes = (Date.now() - collectedAt) / (60 * 1000)
  //   debug('recencyMinutes', recencyMinutes)
  //   if (recencyMinutes < 5) {
  //     return Promise.resolve(this.limit)
  //   }
  //   return this.apiRequest({
  //     method: 'GET',
  //     path: '/integrations/v1/limit/daily',
  //   }).then((results) => {
  //     this.limit = results.filter((r) => r.name === 'api-calls-daily')[0]
  //     return this.limit
  //   })
  // }


}

export { Client };
